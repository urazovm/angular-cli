/**
 * angular2-modal - Angular2 Modal (dialog) window.
 * @version v2.0.0-beta.13
 * @link https://github.com/shlomiassaf/angular2-modal
 * @license MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Overlay, DROP_IN_TYPE, Modal as Modal_ } from "angular2-modal";
import { JSNativePresetBuilder } from './presets/js-native-preset';
export let Modal = class Modal extends Modal_ {
    constructor(overlay) {
        super(overlay);
    }
    alert() {
        return new JSNativePresetBuilder(this, DROP_IN_TYPE.alert);
    }
    prompt() {
        return new JSNativePresetBuilder(this, DROP_IN_TYPE.prompt);
    }
    confirm() {
        return new JSNativePresetBuilder(this, DROP_IN_TYPE.confirm);
    }
    create(dialogRef, type, bindings) {
        return dialogRef;
    }
};
Modal = __decorate([
    Injectable(), 
    __metadata('design:paramtypes', [Overlay])
], Modal);

//# sourceMappingURL=modal.js.map
